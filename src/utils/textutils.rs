/// remove multiple spaces in a string
/// https://stackoverflow.com/a/71864249
/// # Examples
/// ```
/// use utils::textutils::trim_whitespace;
/// let s = "  a  b  c  ";
/// let s = trim_whitespace(s);
/// assert_eq!(s, "a b c");
/// ```
pub fn trim_whitespace(s: &str) -> String {
    // second attempt: only allocate a string
    let mut result = String::with_capacity(s.len());
    s.split_whitespace().for_each(|w| {
        if !result.is_empty() {
            result.push(' ');
        }
        result.push_str(w);
    });
    result
}

pub fn get_list_remove_quotes() -> Vec<[char; 2]> {
    return ['"', '\'', '`', '[', ']', '{', '}']
        .iter()
        .map(|x| [*x, ' '])
        .collect();
}

/// list de caract√®res sp√©ciaux √† remplacer
pub fn get_list_replace_char() -> Vec<[char; 2]> {
    return [
        ('·¥Ä', 'a'),
        (' ô', 'b'),
        ('·¥Ñ', 'c'),
        ('·¥Ö', 'd'),
        ('·¥á', 'e'),
        ('…¢', 'g'),
        (' ú', 'h'),
        ('…™', 'i'),
        ('·¥ä', 'j'),
        ('·¥ã', 'k'),
        (' ü', 'l'),
        ('·¥ç', 'm'),
        ('…¥', 'n'),
        ('·¥è', 'o'),
        ('·¥ò', 'p'),
        (' Ä', 'r'),
        ('·¥õ', 't'),
        ('·¥ú', 'u'),
        ('·¥†', 'v'),
        ('·¥°', 'w'),
        (' è', 'y'),
        ('·¥¢', 'z'),
        ('–∞', 'a'),
        ('–≤', 'b'),
        ('–í', 'b'),
        ('–≥', 'r'),
        ('“ì', 'f'),
        ('–µ', 'e'),
        ('–∏', 'n'),
        ('–∫', 'k'),
        ('–ö', 'k'),
        ('–ª', 'n'),
        ('–º', 'm'),
        ('–ú', 'm'),
        ('–Ω', 'h'),
        ('–ù', 'H'),
        ('–æ', 'o'),
        ('—Ä', 'p'),
        ('–†', 'p'),
        ('—Å', 'c'),
        ('—Ç', 't'),
        ('–¢', 'T'),
        ('—É', 'y'),
        ('—Ö', 'x'),
    ]
    .iter()
    .map(|x| [x.0, x.1])
    .collect();
}

/// remove special characters
/// # Examples
/// ```
/// use utils::textutils::remove_special_characters;
/// let text = "ùê†ùê´ùêöùê¨ et ùò™ùòµùò¢ùò≠ùò™ùò§";
/// let text = remove_special_characters(text);
/// assert_eq!(text, "gras et italic");
/// ```
pub fn remove_special_characters(text: &str) -> String {
    let mut list_of_special_characters = Vec::new();

    list_of_special_characters.append(&mut get_list_remove_quotes());

    list_of_special_characters.append(&mut get_list_replace_char());

    // Alphabet
    for j in [
        'ùêÄ', 'ùêö', 'ùë®', 'ùíÇ', 'ùíú', 'ùí∂', 'ùî∏', 'ùïí', 'ùï¨', 'ùñÜ', 'ùñ†', 'ùñ∫', 'ùóî', 'ùóÆ', 'ùòà', 'ùò¢', 'ùòº', 'ùôñ',
        'ùô∞', 'ùöä', 'ùê¥', 'ùëé', 'ùîÑ', 'ùîû', 'ùìê', 'ùì™',
    ] {
        for i in 0..26 {
            list_of_special_characters.push([
                std::char::from_u32(j as u32 + i).unwrap(),
                std::char::from_u32('a' as u32 + i).unwrap(),
            ]);
        }
    }

    // Chiffres
    for j in ['ùüé', 'ùüò', 'ùü¢', 'ùü¨', 'ùü∂', 'ùü¨', 'ùü¢'] {
        for i in 0..10 {
            list_of_special_characters.push([
                std::char::from_u32(j as u32 + i).unwrap(),
                std::char::from_u32('0' as u32 + i).unwrap(),
            ]);
        }
    }

    let mut text = text.to_string();
    for i in list_of_special_characters {
        text = text.replace(i[0], &i[1].to_string());
    }

    text
}

/// Pars√© les hashtag
/// # Examples
/// ```
/// use utils::textutils::parse_hashtag;
/// let text = "#HelloWorld";
/// let result = parse_hashtag(text);
/// assert_eq!(result, "#Hello World");
/// ```
pub fn parse_hashtag(text: &str) -> String {
    let mut result = String::new();
    let mut is_hashtag = false;

    for c in text.chars() {
        if c == '#' {
            is_hashtag = true;
            continue;
        }

        if is_hashtag {
            if c.is_uppercase() {
                result.push(' ');
            }
            is_hashtag = false;
        }

        result.push(c);
    }

    result
}

// Lister tous les fichiers d'un r√©pertoire
fn list_files(path: &str) -> Vec<String> {
    let mut result = Vec::new();

    let paths = std::fs::read_dir(path).unwrap();

    for path in paths {
        let path = path.unwrap().path();
        let path = path.to_str().unwrap();
        result.push(path.to_string());
    }

    result
}

fn get_list_replace() -> Vec<(String, String)> {
    let mut result = Vec::new();

    let path = list_files("dict/fr_FR");

    for file in path {
        if std::fs::metadata(&file).unwrap().is_file() {
            let file = std::fs::read_to_string(file).unwrap();
            let file = file.split('\n').collect::<Vec<&str>>();
            for line in file {
                let line = line.split('=').collect::<Vec<&str>>();

                if line.len() != 2 {
                    continue;
                }
                result.push((line[0].to_string(), line[1].to_string()));
            }
        }
    }

    result
}

pub fn replace(text: &str) -> String {
    // Si le r√©pertoire existe
    if std::path::Path::new("dict/fr_FR").exists() {
        let mut text = text.to_string();

        for (replace, by) in get_list_replace() {
            text = text.replace(&replace, &by);
        }
    }

    text.to_string()
}

pub fn text_to_dict(text: &str) -> String {
    let mut text = text.to_string();
    text = parse_hashtag(&text);
    text = text.trim().to_string();
    text = trim_whitespace(&text);
    text = remove_special_characters(&text);

    text
}

fn parse_camel_case(text: &str) -> String {
    let mut result = String::new();

    let mut is_uppercase = false;
    for c in text.chars() {
        if c.is_uppercase() {
            if !is_uppercase {
                result.push(' ');
            }
            is_uppercase = true;
        } else {
            is_uppercase = false;
        }

        result.push(c);
    }

    result
}

pub fn read_vars(text: &str) -> String {
    let mut text = text.to_string();

    // on r√©cup√®re les _,- par des espaces
    // Snake_case et kebab-case
    for i in ['_', '-'] {
        text = text.replace(i, " ");
    }

    // on converti le texte example: "HelloWorld" en "Hello World"
    // CamelCase
    text = parse_camel_case(&text);

    text
}
